(ros::roseus-add-msgs "geometry_msgs")
(load "package://fetcheus/fetch-interface.l")

(defun wrenchstamped-to-list (wrench)
  (let ((force (send (send wrench :wrench) :force)))
    (list (send force :x) (send force :y)  (send force :z))))

(defun force-calibration ()
  (let (zero x-pull y-pull)
    (send *ri* :speak-jp "キャリブレーションをします")
    (send *ri* :speak-jp "手に触れないでください" :wait t)
    (send *ri* :speak-jp "さん" :wait t)
    (unix:sleep 1)
    (send *ri* :speak-jp "に" :wait t)
    (unix:sleep 1)
    (send *ri* :speak-jp "いち")
    (let ((sum (list 0 0 0)) tmp (sample 25))
      (dotimes (i sample)
        (ros::ros-info "~A" tmp)
        (setq tmp (wrenchstamped-to-list (one-shot-subscribe "/endeffector/wrench_transformed" geometry_msgs::WrenchStamped)))
        (setq sum (list (+ (elt sum 0) (elt tmp 0))
                        (+ (elt sum 1) (elt tmp 1))
                        (+ (elt sum 2) (elt tmp 2)))))
      (setq zero (list (/ (elt sum 0) sample)
                       (/ (elt sum 1) sample)
                       (/ (elt sum 2) sample)))
      (ros::ros-info "zero:~A" zero))
    (send *ri* :speak-jp "終了しました")
    zero))

(defun counter-clockwise-angle-between-vectors (v1 v2 normal-vector)
  (let* ((det (v. normal-vector (v* v1 v2)))
         (dot (v. v1 v2))
         (angle (+ (atan2 (- det) (- dot)) pi)))
    (when (eps= angle 2pi)
      (setq angle 0.0))
    angle))

(defun clockwise-angle-between-vectors (v1 v2 normal-vector)
  (let* ((det (v. (v- normal-vector) (v* v1 v2)))
         (dot (v. v1 v2))
         (angle (+ (atan2 (- det) (- dot)) pi)))
    (when (eps= angle 2pi)
      (setq angle 0.0))
    angle))

(defun rotate-n-times (n &key (clockwise nil))
  (let* ((sign (if clockwise -1 1))
         (gain 0.6)
         (org-coords (send *ri* :state :odom :pose))
         (org-v (send org-coords :rotate-vector #f(1 0 0))))
    (dotimes (i n)
      (let ((angle 0) (prev-angle 0))
        (while (ros::ok)
          (send *ri* :spin-once)
          (setq prev-angle angle)
          (let ((d-vel (max 0.4 (* gain (- (* 2pi (- n i)) angle)))))
            (setq d-vel (* sign d-vel))
            (send *ri* :send-cmd-vel-raw 0 d-vel)
            (format t "d-vel ~A angle ~A~%" d-vel angle)
            )
          (setq co (send *ri* :state :odom :pose))
          (setq v (send co :rotate-vector #f(1 0 0)))
          (setq angle (if clockwise
                          (clockwise-angle-between-vectors org-v v #f(0 0 1))
                          (counter-clockwise-angle-between-vectors org-v v #f(0 0 1))))
          (when (and (< angle pi) (> prev-angle pi))
            (return))
          (ros::sleep)))))
  (send *ri* :send-cmd-vel-raw 0 0))
    
(defclass pull-arm
  :slots (std-zero std-x std-y force x-list y-list tmp-x tmp-y tmp-z r))

(defmethod pull-arm
    (:init (calib)
     (let* ((ret (if calib
                     (list (force-calibration) (list 2.5 -0.7) (list 2.0 -0.2))
                     (list (list 1.5 0.85 -3.2) (list 2.5 0.7) (list 2.0 -0.2)))))
       (setq std-zero (car ret))
       (setq std-x (cadr ret))
       (setq std-y (caddr ret))
       (send *fetch* :angle-vector (send *ri* :state :potentio-vector))
       (setq arm-pos (send (send *fetch* :rarm :end-coords) :worldpos))
       (setq r (/ (sqrt (+ (expt (elt arm-pos 0) 2) (expt (elt arm-pos 1) 2))) 1000))
       (ros::ros-info "zero: ~A~% x: ~A~% y: ~A~%" std-zero std-x std-y)
       (ros::subscribe "/endeffector/wrench_transformed" geometry_msgs::WrenchStamped #'send self :wrench-cb)
       (setq x-list (list 0))
       (setq y-list (list 0))))

  (:wrench-cb
   (msg)
   (setq force (send (send msg :wrench) :force)))

  (:check (axis)
   ()
   (when (eq axis :x)
     (dolist (i x-list)
       (unless (> (abs i) 0.8)
         (return-from :check nil))))
   (when (eq axis :y)
     (dolist (i y-list)
       (unless (> (abs i) 0.8)
         (return-from :check nil))))
   t)

  (:look-at-hand()
   (let ((pan (rad2deg (atan tmp-y tmp-x))) (tilt (+ 25 (* 2 tmp-z))))
     (if (> pan 0)
         (setq pan (min pan 165))
         (setq pan (max pan -165)))
     (if (> tilt 0)
         (setq tilt (min tilt 55))
         (setq tilt (max tilt -25)))
     (send *fetch* :head :angle-vector (float-vector pan 15))

   ;; (send *fetch* :angle-vector (send *ri* :state :potentio-vector))
   ;; (setq end-pos (send *fetch* :rarm :end-coords :worldpos))
   ;; (setq wrench-pos (float-vector (+ (elt end-pos 0) (* (/ 500 (sqrt (+ (expt tmp-x 2) (expt tmp-y 2)))) tmp-x))
   ;;                                (+ (elt end-pos 1) (* (/ 500 (sqrt (+ (expt tmp-x 2) (expt tmp-y 2)))) tmp-y))
   ;;                                1400))                                  
   ;; (send *fetch* :head :look-at wrench-pos :revert-if-fail nil)
   (send *ri* :angle-vector-raw (send *fetch* :angle-vector) 1200 :head-controller)))

  (:run ()
        (unless (null force)
          (setq tmp-x (- (send force :x) (elt std-zero 0)))
          (setq tmp-y (- (send force :y) (elt std-zero 1)))
          (setq tmp-z (- (send force :z) (elt std-zero 2)))
	  ;; (ros::ros-info "x: ~A  y: ~A z: ~A" tmp-x tmp-y tmp-z)
          (send self :look-at-hand)
          (block move
            (when (> (abs tmp-y) (- 6.4 (elt std-zero 1)))
              (rotate-n-times (+ 1 (floor (/ (- (abs tmp-y) 6.4) 2.5))) :clockwise (if (< tmp-y 0) t nil))
              (return-from :run nil))
            (when (send self :check :y)
              (when (> tmp-y (- (elt std-y 0) (elt std-zero 1)))
                (send *ri* :send-cmd-vel-raw 0 (/ (log tmp-y) 2.6) :topic-name "/base_controller/cmd_vel"))
              (when (< tmp-y (- (elt std-y 1) (elt std-zero 1)))
                (send *ri* :send-cmd-vel-raw 0 (- (/ (log (abs tmp-y)) 2.6)) :topic-name "/base_controller/cmd_vel"))
              (return-from move nil))

            (when (send self :check :x)
              (when (> tmp-x (- (elt std-x 0) (elt std-zero 0)))
                (send *ri* :send-cmd-vel-raw (/ (log tmp-x) 3.6) 0 :topic-name "/base_controller/cmd_vel"))
              (when (< tmp-x (- (elt std-x 1) (elt std-zero 1)))
                (send *ri* :send-cmd-vel-raw (- (/ (log (abs tmp-x)) 4.7)) 0 :topic-name "/base_controller/cmd_vel"))
              (return-from move nil)))

          (when (> (length x-list) 14)
            (setq x-list (cdr x-list)))
          (setq x-list (append x-list (list tmp-x)))

          (when (> (length y-list) 12)
            (setq y-list (cdr y-list)))
          (setq y-list (append y-list (list tmp-y))))
))

(ros::roseus "pull_arm")
(fetch-init)
(send *ri* :angle-vector #f(22.4077 66.8381 49.9094 -124.795 128.259 -49.9694 46.1586 23.8993 0.050981 1.7321))
(send *ri* :wait-interpolation)
(setq *pa* (instance pull-arm :init nil))
(ros::rate 70)
(do-until-key
  (ros::spin-once)
  (send *pa* :run)
  (ros::sleep))
